<%@ Template Language="C#" TargetLanguage="C#" Debug="True" Encoding="UTF-8" %>
<%@ Register Name="TreeIndexComponent" Template="Trees/TreeIndexComponent.cst" MergeProperties="False" ExcludeProperties="" %>

<%@ Assembly Src="..\..\..\Common\Model.cs" %>
<%@ Assembly Src="..\..\..\Common\Extensions.cs" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="SchemaMapper" %>

<%@ Property Name="Entity" Type="SchemaMapper.Entity"  %>
<%@ Property Name="Namespace" Type="System.String" %>
<%-- Safe类名 --%>
<% string SafeClassName = Entity.ClassName.ToSafeName(); %>
<%-- 描述 --%>
<% string Description = Entity.Description; %>
<%-- 驼峰形式类名 --%>
<% string CamelClassName = SafeClassName.ToCamelCase(); %>
<%-- 如果是树型实体，则调用子模板 --%>
<%
if( Entity.IsTreeEntity() ){
    CodeTemplate template =new TreeIndexComponent();
    template.SetProperty("Namespace",Namespace);
    template.SetProperty("Entity",Entity);
    template.Render(this.Response);
    return;
}
%>
import { Component, Injector } from '@angular/core';
import { env } from '../../env';
import { TableQueryComponentBase } from '../../../util';
import { <%=SafeClassName%>Query } from './model/<%=CamelClassName%>-query';
import { <%=SafeClassName%>ViewModel } from './model/<%=CamelClassName%>-view-model';

/**
 * <%=Description%>列表页
 */
@Component({
    selector: '<%=CamelClassName%>-list',
    templateUrl: !env.dev() ? './html/index.component.html' : '/view/<%=Namespace.ToCamelCase()%>/<%=CamelClassName%>'
})
export class <%=SafeClassName%>ListComponent extends TableQueryComponentBase<<%=SafeClassName%>ViewModel, <%=SafeClassName%>Query>  {
    /**
     * 初始化<%=Description%>列表页
     * @param injector 注入器
     */
    constructor(injector: Injector) {
        super(injector);
    }
}